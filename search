// search operation //
#include <stdio.h>
#include <stdlib.h>
int search(int array[], int n, int x) {
  for (int i = 0; i < n; i++)
    if (array[i] == x)
      return i;
  return -1;
}
int binarySearch(int array[], int x, int low, int high) {
  if (high >= low) {
    int mid = low + (high - low) / 2;
    if (array[mid] == x)
      return mid;
    if (array[mid] > x)
      return binarySearch(array, x, low, mid - 1);
    return binarySearch(array, x, mid + 1, high);
  }
  return -1;
}


int main()
{
        int n1,ch,i;
        int array[50];
        printf("Enter array size: \n");
        scanf("%d",&n1);
        printf("\n Enter array elements : \n");
        for(i=0;i<n1;i++)
        {
                scanf("%d",&array[i]);
        }
        while(1)
        {
        printf("\n options : 1.LINEAR SEARCH \n 2.BINARY SEARCH \n 3.EXIT\n");
        printf("\n enter your choice \n");
        scanf("%d",&ch);
        
        switch(ch)
        {
        case 1:int x;
               printf("Binary search \n");
               printf("\n Element to be searched ; ");
               scanf("%d",&x);
               int n2 = sizeof(array) / sizeof(array[0]);
               int result = binarySearch(array, x, 0, n2 - 1);
               if (result == -1)
               {

                       printf("Not found");
               }
               else
               {

                       printf("Element is found at index %d", result);
               }
               break;
        case 2:
               int x1;
               printf("LInear search \n");
               printf("\n Element to be searched ; ");
               scanf("%d",&x1);
               int n3 = sizeof(array) / sizeof(array[0]);
               int res = search(array, n3, x1);
               if ( res == -1)
               {
                       printf("\n not found\n");
               }
               else
               {
                       printf("Element found at index: %d", res);
               }
               break;
        case 3: exit(0);
}
}
return 0;
}


               
