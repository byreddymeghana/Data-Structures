/ queue operations using static implementation //
#include<stdio.h>
#include<stdlib.h>
#define SIZE 5
void Enqueue();
void Dequeue();
void display();
void isempty();
void isfull();
void lenght();
int rear = -1;
int front = -1;
int A[SIZE];
int main()
{
        int ch;
        while(1)
        {
                printf("\n Options : 1.Enqueue \n 2.Dequeue \n 3.Display \n 4.Check if full \n 5. check if empty \n 6. lenght\n 7.Exit\n");
                scanf("%d",&ch);
                switch(ch)
                {
                        case 1: printf("Inserting\n");
                                Enqueue();
                                break;
                        case 2: printf("Deleting\n");
                                Dequeue();
                                break;
                        case 3: printf("Displaying\n");
                                display();
                                break;
                        case 4: isfull();
                                break;
                        case 5: isempty();
                                break;
                        case 6: lenght();
                                break;
                        case 7: exit(0);
                        default:printf("\n Invalid choice \n");
                }
        }
}
void Enqueue()
{
        int n;
        printf("Enter the data \n");
        scanf("%d",&n);
        if(rear == SIZE - 1)
        {
                printf("\nNOT POSSIBLE\n");
        }
        else
        {
                A[++rear] = n;
                if ( front == -1)
                {
                        front++;
                }
        }
}
void Dequeue(){
    if(front == -1 && rear == -1)
        printf("Queue is empty\n");
    else if( rear == front){
        int x = A[rear];
        printf("Data deleted : %d\n",A[front]);
        rear = front = -1;
    }
    else{
        int x = A[front];
        printf("Data deleted : %d\n",A[front]);
               front++;
 }

}
void display()
{
        int i;
        if (front == -1 && rear == -1)
        {
                printf("The Queue is empty\n");
        }
        else
        {
                printf("\nThe Queue is\n");
                for(i=front;i <= rear;i++)
                {
                        printf("%d\n",A[i]);
                }
        }
}
void isfull()
{
        if ( rear == SIZE - 1)
        {
                printf("Queue is full \n");
        }
        else
        {
                printf("Queue is not full \n");
        }
}
void isempty()
{
        if(rear == -1 && front == -1)
        {
                printf("Queue is empty\n");
        }
        else
        
        {
                printf("Queue is not empty\n");
        }
}
void lenght()
{
        int count = 0;
        if(rear >= 0)
        {
                for(int i=front;i<=rear;i++)
                {
                        count++;
                }
        }
        printf("Lenght is %d",count);
                                  
